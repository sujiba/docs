{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Willkommen Unter Wiki findest Du eine lose Sammlung von Anleitungen.","title":"Home"},{"location":"#willkommen","text":"Unter Wiki findest Du eine lose Sammlung von Anleitungen.","title":"Willkommen"},{"location":"wiki/","text":"Willkommen","title":"Willkommen"},{"location":"wiki/#willkommen","text":"","title":"Willkommen"},{"location":"wiki/hetzner_x_restic/","text":"Hetzner x Restic Einf\u00fchrung Hetzner Ein deutscher Hosting-, Cloud- und Storageanbieter. Als Speicherort der Backups wird Hetzners Storage Box genutzt. Restic Ein Programm zur Erstellung von Backups. Diese werden automatisch verschl\u00fcsselt, inkremmentell erzeugt und dedupliziert. Die zu sichernden Daten werden in einem Restic Repository gespeichert. Das Repository kann entweder lokal oder auf einem entfernten Server angelegt werden. Vorbereitung Sofern der zu sichernde Server au\u00dferhalb der Hetzner Cloud steht, muss im Hetzner Robot die \"externe Erreichbarkeit\" aktiviert werden. F\u00fcr den Zugriff auf die Storage Box wird im weiteren SFTP genutzt. Neben der Anmeldung \u00fcber Passwort, ist auch die Authentifizierung \u00fcber SSH-Key m\u00f6glich. SSH-Key generieren Zun\u00e4chst wird der SSH-Key generiert und die authorized_keys Datei vorbereitet. ssh-keygen Wenn SFTP \u00fcber SSH-Port 22 genutzt werden soll, muss der \u00f6ffentliche Schl\u00fcssel in das RFC4716-Format umgewandelt werden. ssh-keygen -e -f .ssh/id_rsa.pub | grep -v \"Comment:\" > .ssh/id_rsa_rfc.pub Der \u00f6ffentliche Schl\u00fcssel wird sowohl im OpenSSH- als auch im RFC4716-Format zur Datei storagebox_authorized_keys hinzugef\u00fcgt. cat .ssh/id_rsa.pub >> storagebox_authorized_keys cat .ssh/id_rsa_rfc.pub >> storagebox_authorized_keys Auf der Storage Box legen wir das Verzeichnis .ssh an und kopieren den Inhalt der storagebox_authorized_keys nach .ssh/authorized_keys. echo -e \"mkdir .ssh \\n chmod 700 .ssh \\n put storagebox_authorized_keys .ssh/authorized_keys \\n chmod 600 .ssh/authorized_keys\" | sftp u123456@u123456.your-storagebox.de SSH-Config anlegen Die SSH-Config verk\u00fcrzt den Befehl zur Verbindung mit dem SFTP-Server, da hier alle wichtigen Parameter zur Anmeldung mitgegeben werden k\u00f6nnen. vi ~/.ssh/config Und folgenden Inhalt hinzuf\u00fcgen: host storagebox HostName u123456.your-storagebox.de User u123456 IdentityFile ~/.ssh/id_rsa ServerAliveInterval 60 ServerAliveCountMax 240 Verzeichnis anlegen echo -e \"mkdir backup_server_1\" | sftp u123456@u123456.your-storagebox.de Hier wird sp\u00e4ter das Backup Repository des Servers auf der Storage Box abgelegt. Restic Installation Debian / Ubuntu RHEL / AlmaLinux apt install restic dnf install epel dnf update dnf install restic Initialisierung Mit folgendem Befehl wird das Restic-Repository auf der Storage Box initialisiert. restic -r sftp:storagebox:/backup_server_1 init Automatisierung Skript Unter /opt/scripts m\u00fcssen die folgenden Dateien angelegt werden: restic_env export RESTIC_REPOSITORY = sftp:storagebox:/backup_server_1 export RESTIC_PASSWORD = PASSWORD backup.sh #!/usr/bin/env bash # This script is intended to be run by a systemd timer # Exit on failure or pipefail set -euo pipefail #Set this to any location you like BACKUP_PATHS = \"/var/lib/docker/volumes /opt/docker\" BACKUP_TAG = systemd.timer # How many backups to keep. RETENTION_DAYS = 7 RETENTION_WEEKS = 4 RETENTION_MONTHS = 12 RETENTION_YEARS = 1 source /opt/scripts/restic_env # Remove locks in case other stale processes kept them in restic unlock & wait $! #Do the backup restic --verbose \\ --tag $BACKUP_TAG \\ backup $BACKUP_PATHS & wait $! # Remove old Backups restic forget \\ --verbose \\ --tag $BACKUP_TAG \\ --prune \\ --keep-daily $RETENTION_DAYS \\ --keep-weekly $RETENTION_WEEKS \\ --keep-monthly $RETENTION_MONTHS \\ --keep-yearly $RETENTION_YEARS & wait $! # Check if everything is fine restic check & wait $! echo \"Backup done!\" Nachdem die backup.sh angelegt wurde, muss das Skript ausf\u00fchrbar gemacht werden. chmod u+x /opt/scripts/backup.sh Daemon Unter /etc/systemd/system/ werden die folgende Dienste angelegt: backup.timer backup.service [ Unit ] Description = Backup on schedule [ Timer ] OnCalendar = daily Persistent = true [ Install ] WantedBy = timers.target [ Unit ] Description = Backup with restic [ Service ] Type = simple Nice = 10 ExecStart = /opt/scripts/backup.sh #$HOME must be set for restic to find /root/.cache/restic/ Environment = \"HOME=/root\" Abschlie\u00dfend muss der systemd Manager neu geladen und backup.timer in den automatischen Start aufgenommen werden. systemctl daemon-reload systemctl enable backup.timer systemctl start backup.timer Jetzt startet backup.timer den Dienst backup.service t\u00e4glich gegen Mitternacht. Dar\u00fcber hinaus kann backup service auch manuell gestartet werden. systemctl start backup.service # Pr\u00fcfen, ob Fehler aufgetreten sind journalctl -u backup.service # Pr\u00fcfen, ob Backup erfolgreich restic -r sftp:storagebox:/backup_server_1 snapshots Backups wiederherstellen Restic Restore Um einen einzelnen Ordner aus dem letzten Backup wiederherzustellen, kann zum Beispiel folgender Befehl genutzt werden: restic -r sftp:storagebox:/backup_server_1 restore latest --target /tmp/restore --include /opt/docker/folder Quellen https://docs.hetzner.com/de/robot/storage-box https://restic.readthedocs.io/en/stable/ https://blog.bithive.space/post/automatic-backups-with-restic/","title":"Hetzner x Restic"},{"location":"wiki/hetzner_x_restic/#hetzner-x-restic","text":"","title":"Hetzner x Restic"},{"location":"wiki/hetzner_x_restic/#einfuhrung","text":"Hetzner Ein deutscher Hosting-, Cloud- und Storageanbieter. Als Speicherort der Backups wird Hetzners Storage Box genutzt. Restic Ein Programm zur Erstellung von Backups. Diese werden automatisch verschl\u00fcsselt, inkremmentell erzeugt und dedupliziert. Die zu sichernden Daten werden in einem Restic Repository gespeichert. Das Repository kann entweder lokal oder auf einem entfernten Server angelegt werden.","title":"Einf\u00fchrung"},{"location":"wiki/hetzner_x_restic/#vorbereitung","text":"Sofern der zu sichernde Server au\u00dferhalb der Hetzner Cloud steht, muss im Hetzner Robot die \"externe Erreichbarkeit\" aktiviert werden. F\u00fcr den Zugriff auf die Storage Box wird im weiteren SFTP genutzt. Neben der Anmeldung \u00fcber Passwort, ist auch die Authentifizierung \u00fcber SSH-Key m\u00f6glich.","title":"Vorbereitung"},{"location":"wiki/hetzner_x_restic/#ssh-key-generieren","text":"Zun\u00e4chst wird der SSH-Key generiert und die authorized_keys Datei vorbereitet. ssh-keygen Wenn SFTP \u00fcber SSH-Port 22 genutzt werden soll, muss der \u00f6ffentliche Schl\u00fcssel in das RFC4716-Format umgewandelt werden. ssh-keygen -e -f .ssh/id_rsa.pub | grep -v \"Comment:\" > .ssh/id_rsa_rfc.pub Der \u00f6ffentliche Schl\u00fcssel wird sowohl im OpenSSH- als auch im RFC4716-Format zur Datei storagebox_authorized_keys hinzugef\u00fcgt. cat .ssh/id_rsa.pub >> storagebox_authorized_keys cat .ssh/id_rsa_rfc.pub >> storagebox_authorized_keys Auf der Storage Box legen wir das Verzeichnis .ssh an und kopieren den Inhalt der storagebox_authorized_keys nach .ssh/authorized_keys. echo -e \"mkdir .ssh \\n chmod 700 .ssh \\n put storagebox_authorized_keys .ssh/authorized_keys \\n chmod 600 .ssh/authorized_keys\" | sftp u123456@u123456.your-storagebox.de","title":"SSH-Key generieren"},{"location":"wiki/hetzner_x_restic/#ssh-config-anlegen","text":"Die SSH-Config verk\u00fcrzt den Befehl zur Verbindung mit dem SFTP-Server, da hier alle wichtigen Parameter zur Anmeldung mitgegeben werden k\u00f6nnen. vi ~/.ssh/config Und folgenden Inhalt hinzuf\u00fcgen: host storagebox HostName u123456.your-storagebox.de User u123456 IdentityFile ~/.ssh/id_rsa ServerAliveInterval 60 ServerAliveCountMax 240","title":"SSH-Config anlegen"},{"location":"wiki/hetzner_x_restic/#verzeichnis-anlegen","text":"echo -e \"mkdir backup_server_1\" | sftp u123456@u123456.your-storagebox.de Hier wird sp\u00e4ter das Backup Repository des Servers auf der Storage Box abgelegt.","title":"Verzeichnis anlegen"},{"location":"wiki/hetzner_x_restic/#restic","text":"","title":"Restic"},{"location":"wiki/hetzner_x_restic/#installation","text":"Debian / Ubuntu RHEL / AlmaLinux apt install restic dnf install epel dnf update dnf install restic","title":"Installation"},{"location":"wiki/hetzner_x_restic/#initialisierung","text":"Mit folgendem Befehl wird das Restic-Repository auf der Storage Box initialisiert. restic -r sftp:storagebox:/backup_server_1 init","title":"Initialisierung"},{"location":"wiki/hetzner_x_restic/#automatisierung","text":"","title":"Automatisierung"},{"location":"wiki/hetzner_x_restic/#skript","text":"Unter /opt/scripts m\u00fcssen die folgenden Dateien angelegt werden: restic_env export RESTIC_REPOSITORY = sftp:storagebox:/backup_server_1 export RESTIC_PASSWORD = PASSWORD backup.sh #!/usr/bin/env bash # This script is intended to be run by a systemd timer # Exit on failure or pipefail set -euo pipefail #Set this to any location you like BACKUP_PATHS = \"/var/lib/docker/volumes /opt/docker\" BACKUP_TAG = systemd.timer # How many backups to keep. RETENTION_DAYS = 7 RETENTION_WEEKS = 4 RETENTION_MONTHS = 12 RETENTION_YEARS = 1 source /opt/scripts/restic_env # Remove locks in case other stale processes kept them in restic unlock & wait $! #Do the backup restic --verbose \\ --tag $BACKUP_TAG \\ backup $BACKUP_PATHS & wait $! # Remove old Backups restic forget \\ --verbose \\ --tag $BACKUP_TAG \\ --prune \\ --keep-daily $RETENTION_DAYS \\ --keep-weekly $RETENTION_WEEKS \\ --keep-monthly $RETENTION_MONTHS \\ --keep-yearly $RETENTION_YEARS & wait $! # Check if everything is fine restic check & wait $! echo \"Backup done!\" Nachdem die backup.sh angelegt wurde, muss das Skript ausf\u00fchrbar gemacht werden. chmod u+x /opt/scripts/backup.sh","title":"Skript"},{"location":"wiki/hetzner_x_restic/#daemon","text":"Unter /etc/systemd/system/ werden die folgende Dienste angelegt: backup.timer backup.service [ Unit ] Description = Backup on schedule [ Timer ] OnCalendar = daily Persistent = true [ Install ] WantedBy = timers.target [ Unit ] Description = Backup with restic [ Service ] Type = simple Nice = 10 ExecStart = /opt/scripts/backup.sh #$HOME must be set for restic to find /root/.cache/restic/ Environment = \"HOME=/root\" Abschlie\u00dfend muss der systemd Manager neu geladen und backup.timer in den automatischen Start aufgenommen werden. systemctl daemon-reload systemctl enable backup.timer systemctl start backup.timer Jetzt startet backup.timer den Dienst backup.service t\u00e4glich gegen Mitternacht. Dar\u00fcber hinaus kann backup service auch manuell gestartet werden. systemctl start backup.service # Pr\u00fcfen, ob Fehler aufgetreten sind journalctl -u backup.service # Pr\u00fcfen, ob Backup erfolgreich restic -r sftp:storagebox:/backup_server_1 snapshots","title":"Daemon"},{"location":"wiki/hetzner_x_restic/#backups-wiederherstellen","text":"Restic Restore Um einen einzelnen Ordner aus dem letzten Backup wiederherzustellen, kann zum Beispiel folgender Befehl genutzt werden: restic -r sftp:storagebox:/backup_server_1 restore latest --target /tmp/restore --include /opt/docker/folder","title":"Backups wiederherstellen"},{"location":"wiki/hetzner_x_restic/#quellen","text":"https://docs.hetzner.com/de/robot/storage-box https://restic.readthedocs.io/en/stable/ https://blog.bithive.space/post/automatic-backups-with-restic/","title":"Quellen"},{"location":"wiki/homeassistant/","text":"Home Assistant Einf\u00fchrung Home Assistant ist eine kostenlose und quelloffene Software zur Hausautomation, die als zentrales Steuerungssystem in einem Smart Home oder Smart House konzipiert ist. Geschrieben in Python liegt ihr Hauptaugenmerk auf lokaler Steuerung und Privatsph\u00e4re. Vorbereitung Es wird empfohlen, anstelle der SD-Karte eine SSD einzusetzen, da Home Assistant sehr schreibintensiv ist und SD-Karten durch viele Schreibvorg\u00e4nge fr\u00fchzeitig einen Defekt erleiden k\u00f6nnen. Damit der Raspberry Pi beim Systemstart von der SSD bootet, muss die Boot-Reihenfolge angepasst werden. Boot from USB Raspberry Pi Imager \u00f6ffnen. Unter \"OS W\u00e4hlen/Misc utility images/Bootloader/USB Boot\" ausw\u00e4hlen. Dann unter \"SD-Karte w\u00e4hlen\" die SD-Karte ausw\u00e4hlen und mit \"Schreiben\" den Vorgang starten. Sobald die SD-Karte beschrieben und ausgeworfen wurde, kann diese in den Raspberry Pi gesteckt werden. Den Raspberry Pi an den Strom anschlie\u00dfen. Eine Minute warten, den Raspberry Pi wieder vom Strom trennen und die SD-Karte entfernen. HassOS auf SSD laden Als n\u00e4chstes k\u00f6nnen wir die SSD vorbereiten. Diese \u00fcber SATA zu USB Adapter am Rechner anschlie\u00dfen. Erneut den Raspberry Pi Imager \u00f6ffnen. In diesem Fall w\u00e4hlen wir unter \"OS w\u00e4hlen/Other specific-purpose OS/Home assistants and home automation/Home Assistant/Home Assistant OS 9.3 (Pi Version)\" aus. Unter \"SD-Karte w\u00e4hlen\" die SSD ausw\u00e4hlen und auf \"Schreiben\" klicken. Nach Abschluss des Schreibvorgangs kann die SSD vom Rechenr getrennt und an den Raspberry Pi angeschlossen werden. Abschlie\u00dfen den Raspberry Pi wieder mit Strom versorgen. Einrichtung Home Assistant ist jetzt unter http://homeassistant.local:8123 erreichbar und kann eingerichtet werden. Siehe hierf\u00fcr Onboarding . Add-Ons Unter \"Einstellungen/Add-Ons\" kann man \u00fcber den \"Add-On Store\" (Schalter unten rechts) Erweiterungen hinzuf\u00fcgen. Diese Add-Ons sind weitere Docker Container, die \u00fcber Home Assistant konfiguriert und gestartet werden. Die Konfigurationen k\u00f6nnen auch in YAML bearbeitet werden. Hierf\u00fcr bei dem jeweiligen Add-On unter dem Reiter \"Konfiguration\" auf das drei Punkte Men\u00fc klicken und \"Als YAML bearbeiten\" ausw\u00e4hlen. Let's Encrypt Dokumentation Folgend ein Beispiel zur Erstellung eines Let's Encrypt Zertifkats mit DNS-01 und der Netcup API: Konfiguration domains : - home.example.com - second.example.com email : MAIL keyfile : privkey.pem certfile : fullchain.pem challenge : dns dns : provider : dns-netcup propagation_seconds : 900 netcup_customer_id : \"123456\" netcup_api_key : KEY netcup_api_password : PASSWORD Das Zertifikat sowie der Key werden unter /ssl abgelegt und k\u00f6nnen so auch von anderen Add-Ons genutzt werde. NGINX Home Assistant SSL proxy Dokumentation Folgend ein Beispiel zur Einrichtung des Reverse Proxys: Konfiguration domain : home.example.com hsts : max-age=31536000; includeSubDomains certfile : fullchain.pem keyfile : privkey.pem cloudflare : false customize : active : true default : nginx_proxy_default*.conf servers : nginx_proxy/*.conf Durch das Setzen der Option \"active: true\" haben wir jetzt die M\u00f6glichkeit weitere vHosts f\u00fcr andere Add-Ons (zB Uptime Kuma) unter \"nginx_proxy/*.conf\" anzulegen. Der Ordner \"nginx_proxy\" muss unter \"/share\" angelegt werden. Dies kann mit dem Add-On \"Terminal & SSH\" gemacht werden. SSH & Terminal Dokumentation Mosquitto broker Dokumentation Zigbee2MQTT Dokumentation Folgend ein Beispiel zur Einrichtung von Zigbee2MQTT mit dem ConBee II: Konfiguration data_path : /config/zigbee2mqtt socat : enabled : false master : pty,raw,echo=0,link=/tmp/ttyZ2M,mode=777 slave : tcp-listen:8485,keepalive,nodelay,reuseaddr,keepidle=1,keepintvl=1,keepcnt=5 options : \"-d -d\" log : false mqtt : {} serial : adapter : deconz port : /dev/ttyACM0 Uptime Kuma Dokumentation Damit Uptime Kuma auch \u00fcber https erreichbar ist, muss jetzt unter \"/share/nginx_proxy\" eine neue vHost Konfiguration angelegt werden: uptime-kuma.conf server { listen 443 ssl http2 ; server_name sub.domain.com ; ssl_certificate /ssl/fullchain.pem ; ssl_certificate_key /ssl/privkey.pem ; location / { proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header Host $host ; proxy_pass http://HOSTNAME:3001/ ; proxy_http_version 1 .1 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection \"upgrade\" ; } } \"HOSTNAME\" muss ersetzt werden. Hier muss der korrekte Name des Docker Containers eingetragen werden, ansonsten kann der Traffic nicht weitergeleitet werden. Der Hostname des Containers ist bei dem jeweiligen Add-On unter dem Punkt \"Informationen\" zu finden. Integrationen \u00dcber Integrationen k\u00f6nnen die verschiedensten Hersteller sowie Produkte in Home Assistant eingebunden werden.","title":"Home Assistant"},{"location":"wiki/homeassistant/#home-assistant","text":"","title":"Home Assistant"},{"location":"wiki/homeassistant/#einfuhrung","text":"Home Assistant ist eine kostenlose und quelloffene Software zur Hausautomation, die als zentrales Steuerungssystem in einem Smart Home oder Smart House konzipiert ist. Geschrieben in Python liegt ihr Hauptaugenmerk auf lokaler Steuerung und Privatsph\u00e4re.","title":"Einf\u00fchrung"},{"location":"wiki/homeassistant/#vorbereitung","text":"Es wird empfohlen, anstelle der SD-Karte eine SSD einzusetzen, da Home Assistant sehr schreibintensiv ist und SD-Karten durch viele Schreibvorg\u00e4nge fr\u00fchzeitig einen Defekt erleiden k\u00f6nnen. Damit der Raspberry Pi beim Systemstart von der SSD bootet, muss die Boot-Reihenfolge angepasst werden.","title":"Vorbereitung"},{"location":"wiki/homeassistant/#boot-from-usb","text":"Raspberry Pi Imager \u00f6ffnen. Unter \"OS W\u00e4hlen/Misc utility images/Bootloader/USB Boot\" ausw\u00e4hlen. Dann unter \"SD-Karte w\u00e4hlen\" die SD-Karte ausw\u00e4hlen und mit \"Schreiben\" den Vorgang starten. Sobald die SD-Karte beschrieben und ausgeworfen wurde, kann diese in den Raspberry Pi gesteckt werden. Den Raspberry Pi an den Strom anschlie\u00dfen. Eine Minute warten, den Raspberry Pi wieder vom Strom trennen und die SD-Karte entfernen.","title":"Boot from USB"},{"location":"wiki/homeassistant/#hassos-auf-ssd-laden","text":"Als n\u00e4chstes k\u00f6nnen wir die SSD vorbereiten. Diese \u00fcber SATA zu USB Adapter am Rechner anschlie\u00dfen. Erneut den Raspberry Pi Imager \u00f6ffnen. In diesem Fall w\u00e4hlen wir unter \"OS w\u00e4hlen/Other specific-purpose OS/Home assistants and home automation/Home Assistant/Home Assistant OS 9.3 (Pi Version)\" aus. Unter \"SD-Karte w\u00e4hlen\" die SSD ausw\u00e4hlen und auf \"Schreiben\" klicken. Nach Abschluss des Schreibvorgangs kann die SSD vom Rechenr getrennt und an den Raspberry Pi angeschlossen werden. Abschlie\u00dfen den Raspberry Pi wieder mit Strom versorgen.","title":"HassOS auf SSD laden"},{"location":"wiki/homeassistant/#einrichtung","text":"Home Assistant ist jetzt unter http://homeassistant.local:8123 erreichbar und kann eingerichtet werden. Siehe hierf\u00fcr Onboarding .","title":"Einrichtung"},{"location":"wiki/homeassistant/#add-ons","text":"Unter \"Einstellungen/Add-Ons\" kann man \u00fcber den \"Add-On Store\" (Schalter unten rechts) Erweiterungen hinzuf\u00fcgen. Diese Add-Ons sind weitere Docker Container, die \u00fcber Home Assistant konfiguriert und gestartet werden. Die Konfigurationen k\u00f6nnen auch in YAML bearbeitet werden. Hierf\u00fcr bei dem jeweiligen Add-On unter dem Reiter \"Konfiguration\" auf das drei Punkte Men\u00fc klicken und \"Als YAML bearbeiten\" ausw\u00e4hlen.","title":"Add-Ons"},{"location":"wiki/homeassistant/#lets-encrypt","text":"Dokumentation Folgend ein Beispiel zur Erstellung eines Let's Encrypt Zertifkats mit DNS-01 und der Netcup API: Konfiguration domains : - home.example.com - second.example.com email : MAIL keyfile : privkey.pem certfile : fullchain.pem challenge : dns dns : provider : dns-netcup propagation_seconds : 900 netcup_customer_id : \"123456\" netcup_api_key : KEY netcup_api_password : PASSWORD Das Zertifikat sowie der Key werden unter /ssl abgelegt und k\u00f6nnen so auch von anderen Add-Ons genutzt werde.","title":"Let's Encrypt"},{"location":"wiki/homeassistant/#nginx-home-assistant-ssl-proxy","text":"Dokumentation Folgend ein Beispiel zur Einrichtung des Reverse Proxys: Konfiguration domain : home.example.com hsts : max-age=31536000; includeSubDomains certfile : fullchain.pem keyfile : privkey.pem cloudflare : false customize : active : true default : nginx_proxy_default*.conf servers : nginx_proxy/*.conf Durch das Setzen der Option \"active: true\" haben wir jetzt die M\u00f6glichkeit weitere vHosts f\u00fcr andere Add-Ons (zB Uptime Kuma) unter \"nginx_proxy/*.conf\" anzulegen. Der Ordner \"nginx_proxy\" muss unter \"/share\" angelegt werden. Dies kann mit dem Add-On \"Terminal & SSH\" gemacht werden.","title":"NGINX Home Assistant SSL proxy"},{"location":"wiki/homeassistant/#ssh-terminal","text":"Dokumentation","title":"SSH &amp; Terminal"},{"location":"wiki/homeassistant/#mosquitto-broker","text":"Dokumentation","title":"Mosquitto broker"},{"location":"wiki/homeassistant/#zigbee2mqtt","text":"Dokumentation Folgend ein Beispiel zur Einrichtung von Zigbee2MQTT mit dem ConBee II: Konfiguration data_path : /config/zigbee2mqtt socat : enabled : false master : pty,raw,echo=0,link=/tmp/ttyZ2M,mode=777 slave : tcp-listen:8485,keepalive,nodelay,reuseaddr,keepidle=1,keepintvl=1,keepcnt=5 options : \"-d -d\" log : false mqtt : {} serial : adapter : deconz port : /dev/ttyACM0","title":"Zigbee2MQTT"},{"location":"wiki/homeassistant/#uptime-kuma","text":"Dokumentation Damit Uptime Kuma auch \u00fcber https erreichbar ist, muss jetzt unter \"/share/nginx_proxy\" eine neue vHost Konfiguration angelegt werden: uptime-kuma.conf server { listen 443 ssl http2 ; server_name sub.domain.com ; ssl_certificate /ssl/fullchain.pem ; ssl_certificate_key /ssl/privkey.pem ; location / { proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header Host $host ; proxy_pass http://HOSTNAME:3001/ ; proxy_http_version 1 .1 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection \"upgrade\" ; } } \"HOSTNAME\" muss ersetzt werden. Hier muss der korrekte Name des Docker Containers eingetragen werden, ansonsten kann der Traffic nicht weitergeleitet werden. Der Hostname des Containers ist bei dem jeweiligen Add-On unter dem Punkt \"Informationen\" zu finden.","title":"Uptime Kuma"},{"location":"wiki/homeassistant/#integrationen","text":"\u00dcber Integrationen k\u00f6nnen die verschiedensten Hersteller sowie Produkte in Home Assistant eingebunden werden.","title":"Integrationen"}]}